generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz(6)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(6)
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @db.Timestamptz(6)
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model apikey {
  id                  String    @id @default(cuid())
  name                String?   @unique
  start               String?
  prefix              String?
  key                 String @unique
  userId              String
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime? @db.Timestamptz(6)
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime? @db.Timestamptz(6)
  expiresAt           DateTime? @db.Timestamptz(6)
  createdAt           DateTime  @db.Timestamptz(6)
  updatedAt           DateTime  @db.Timestamptz(6)
  permissions         String?
  metadata            String?
  user                user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model session {
  id        String   @id @default(cuid())
  expiresAt DateTime @db.Timestamptz(6)
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @db.Timestamptz(6)
  account       account[]
  apikey        apikey[]
  session       session[]
  walletAddress walletAddress?
  agent         agent[]
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @db.Timestamptz(6)
}

model walletAddress {
  id        String   @id @default(cuid())
  userId    String   @unique
  address   String
  chainId   Int
  isPrimary Boolean
  createdAt DateTime @db.Timestamptz(6)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model agent {
  id                String   @id @default(cuid())
  name              String
  description       String
  agentCost         String
  deployedUrl       String
  inputTokenCost    Float   @default(0)
  outputTokenCost   Float   @default(0)
  llmProvider       String
  isPublic          Boolean  @default(false)
  isActive          Boolean
  availableToUse    Boolean  @default(false)
  userId            String
  skills            String[]
  is_multiAgentSystem Boolean  @default(false)
  default_agent_name String?
  framework_used    String @default("google_adk")
  can_stream        Boolean?
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt         DateTime @db.Timestamptz(6)
  updatedAt         DateTime @db.Timestamptz(6)
  embedding         Float[]
}